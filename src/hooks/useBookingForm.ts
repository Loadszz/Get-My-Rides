import { useState } from 'react'

export const useBookingForm = () => {
	const [formData, setFormData] = useState({
		information: {},
		details: {},
		company: {},
		choice: 'no' as 'yes' | 'no', // –¥–æ–±–∞–≤–∏–ª–∏ choice
	})

	// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–π
	const handleUpdate = (section: string, data: Record<string, any>) => {
		setFormData(prev => ({
			...prev,
			[section]: { ...prev[section], ...data },
		}))
	}

	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ "Business Booking?"
	const handleChoice = (value: 'yes' | 'no') => {
		setFormData(prev => ({ ...prev, choice: value }))
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ / –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
	const handleSubmit = async () => {
		console.clear()

		// –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
		const requiredFields: Record<string, string[]> = {
			details: ['firstName', 'lastName', 'email', 'phone'],
		}
		if (formData.choice === 'yes') {
			requiredFields.company = [
				'companyName',
				'address',
				'postalCode',
				'city',
				'country',
				'vatNumber',
			]
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
		for (const section in requiredFields) {
			for (const field of requiredFields[section]) {
				if (
					!formData[section]?.[field] ||
					formData[section][field].toString().trim() === ''
				) {
					alert(
						`‚ùå –ü–æ–ª–µ "${field}" –≤ —Å–µ–∫—Ü–∏–∏ "${section}" –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è`
					)
					return
				}
			}
		}

		// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
		console.group(
			'%cüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è',
			'color:#0a58ca; font-weight: bold;'
		)
		Object.entries(formData).forEach(([section, data]) => {
			console.groupCollapsed(
				`%cüì¶ ${section}`,
				'color:#22c55e; font-weight: bold;'
			)
			console.table(data)
			console.groupEnd()
		})
		console.groupEnd()
		console.log(
			'%c‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ "–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã" (–ª–æ–∫–∞–ª—å–Ω–æ)',
			'color:#16a34a; font-weight:bold;'
		)
		alert('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–ø—Ä–æ–≤–µ—Ä—å –∫–æ–Ω—Å–æ–ª—å)')
	}

	return { formData, handleUpdate, handleChoice, handleSubmit }
}
